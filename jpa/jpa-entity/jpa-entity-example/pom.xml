<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <parent>
        <groupId>info.ejava.examples.jpa</groupId>
        <artifactId>jpa-entity</artifactId>
        <version>5.0.0-SNAPSHOT</version>
    </parent>

    <artifactId>jpa-entity-example</artifactId>

    <name>JPA::Entity::Examples</name>
    <description>
      This module provides a examples of using the Java Persistence API
      to map object (void of relationships and inheritance) to the database.
    </description>

    <dependencies>
        <!-- core dependencies -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>javax.persistence</groupId>
            <artifactId>javax.persistence-api</artifactId>
            <scope>provided</scope>
        </dependency>        

        <dependency>
            <groupId>org.hibernate</groupId>
            <artifactId>hibernate-core</artifactId>
            <scope>test</scope>
        </dependency>

        <!-- core project testing dependencies -->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <scope>test</scope>
        </dependency>        
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-log4j12</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>log4j</groupId>
            <artifactId>log4j</artifactId>
            <scope>test</scope>
        </dependency>    
    </dependencies>

    <build>
        <!--tell the resource plugin to perform filtering on resources 
             to fill in JDBC URL, etc. -->
        <resources>
            <resource>
                <directory>src/main/resources</directory>
                <filtering>true</filtering>
            </resource>
        </resources>
        <testResources>
            <testResource>
                <directory>src/test/resources</directory>
                <filtering>true</filtering>
            </testResource>
        </testResources>

        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <configuration>
                    <argLine>${surefire.argLine}</argLine>
                    <systemPropertyVariables>
                        <sql.sequences>${sql.sequences}</sql.sequences>
                    </systemPropertyVariables>
                </configuration>
            </plugin>

            <plugin>
                <groupId>info.ejava.utils.jpa</groupId>
                <artifactId>jpa-schemagen-maven-plugin</artifactId>
            </plugin>

               <!-- generates schema files with DDL commands to create/drop schema within DB
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-antrun-plugin</artifactId>
                <dependencies>
                    <dependency>
                        <groupId>info.ejava.utils.jpa</groupId>
                        <artifactId>jpa-schema-gen</artifactId>
                        <version>${project.version}</version>
                    </dependency>
                </dependencies>
                <executions>
                    <execution>
                        <id>generate-schema</id>
                        <phase>process-test-resources</phase>
                        <goals>
                            <goal>run</goal>
                        </goals>
                        <configuration>
                            <target>
                                <!- task will create schema and terminate - freeing up the DB connection ->
                                <java classname="ejava.util.jpa.JPASchemaGen" fork="true" spawn="true">
                                    <arg value="ormCore"></arg>
                                    <classpath>
                                        <path refid="maven.test.classpath" />
                                        <path refid="maven.plugin.classpath" />
                                    </classpath>
                                </java>
                                <!- wait for DB to come free ->
                                <sleep milliseconds="1000" />
                            </target>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
                -->

        </plugins>
     </build>
</project>
