<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
    <parent>
        <groupId>info.ejava.examples.async</groupId>
        <artifactId>async</artifactId>
        <version>5.0.0-SNAPSHOT</version>
    </parent>
    <modelVersion>4.0.0</modelVersion>

    <artifactId>jmsNotifier</artifactId>
    <packaging>jar</packaging>

    <name>Async::JMS (Topic) Notifier</name>
    <description>
        This project provides a small example of a notification application
        and N-number of non-durable and durable subscribers that use a JMS
        topic to distribute information.
    </description>

    <properties>
        <jms.host>localhost</jms.host>
        <artemis.remoting.netty.host>${jms.host}</artemis.remoting.netty.host>
        <!-- set -Djms.spawn=false to run server in foreground. Requires 2 windows. -->
        <jms.spawn>true</jms.spawn>

        <!-- Ant script designed to reference a built classpath into M2_REPO
             or a directory of .jar files in target/dependencies. 
             * set to build-classpath to save time/space (~25-30MB)
             * set to copy-dependencies if generated classpath too long (~many K chars)
             Switch between them by using -Djms.classpath=(goal)
             -->
        <jms.classpath>build-classpath</jms.classpath>
        <java.naming.factory.initial>org.apache.activemq.artemis.jndi.ActiveMQInitialContextFactory</java.naming.factory.initial>
        <java.naming.provider.url>tcp://${artemis.remoting.netty.host}:${artemis.remoting.netty.port}</java.naming.provider.url>
        <java.naming.factory.url.pkgs></java.naming.factory.url.pkgs>
    </properties>


    <dependencies>
        <!-- core dependencies -->
        <dependency>
            <groupId>javax.jms</groupId>
            <artifactId>jms</artifactId>
            <scope>compile</scope>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <scope>compile</scope>
        </dependency>

        <dependency>
            <groupId>info.ejava.examples.common</groupId>
            <artifactId>ejava-util</artifactId>
            <version>${project.version}</version>
            <scope>test</scope>
        </dependency>    

        <dependency>
            <groupId>org.apache.activemq</groupId>
            <artifactId>artemis-jms-client</artifactId>
            <scope>runtime</scope>
        </dependency>


        <!-- test dependencies -->
        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>jmsMechanics</artifactId>
            <version>${project.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>${project.groupId}</groupId>
            <artifactId>jmsMechanics</artifactId>
            <version>${project.version}</version>
            <classifier>tests</classifier>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-log4j12</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>log4j</groupId>
            <artifactId>log4j</artifactId>
            <scope>test</scope>
        </dependency>    

        <!-- runtime dependencies required to run JMS server instance -->
        <dependency>
            <groupId>org.apache.activemq</groupId>
            <artifactId>artemis-jms-server</artifactId>
            <scope>runtime</scope>
        </dependency>
    </dependencies>

    <build>
        <!-- filter resource files for profile-specific values -->
        <testResources>
            <testResource>
                <directory>src/test/resources</directory>
                <filtering>true</filtering>
                <includes>
                    <include>**/broker.xml</include>
                    <include>jndi.properties</include>
                </includes>
            </testResource>
            <testResource>
                <directory>src/test/resources</directory>
                <filtering>false</filtering>
                <excludes>
                    <exclude>**/broker.xml</exclude>
                    <exclude>jndi.properties</exclude>
                </excludes>
            </testResource>
        </testResources>

        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <configuration>
                    <systemPropertyVariables>
                        <jms.embedded>${jms.embedded}</jms.embedded>
                    </systemPropertyVariables>
                </configuration>
            </plugin>

            <!-- needed to run IT tests -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-failsafe-plugin</artifactId>
            </plugin>

            <!-- create a classpath for our JSE clients to run -->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-dependency-plugin</artifactId>
                <executions>
                    <execution>
                        <phase>package</phase>
                        <goals>
                            <goal>${jms.classpath}</goal>
                        </goals>
                    </execution>
                 </executions>
                 <configuration>
                     <outputFile>target/test-classes/dependency-classpath</outputFile>
                 </configuration>
            </plugin>      

            <!-- allocate an unused port for the JMS server -->
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>build-helper-maven-plugin</artifactId>
                <executions>
                    <execution>
                        <id>add-source</id>
                        <phase>generate-resources</phase>
                        <goals>
                            <goal>reserve-network-port</goal>
                        </goals>
                        <configuration>
                            <portNames>
                                <portName>artemis.remoting.netty.port</portName>
                            </portNames>
                        </configuration>
                    </execution>
                </executions>
            </plugin>

            <!-- this module does not play well with the site plugin -->
            <plugin> 
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-site-plugin</artifactId>
                <configuration>
                    <skip>true</skip>
                    <skipDeploy>true</skipDeploy>
                </configuration>
            </plugin>
        </plugins>
      </build>

    <profiles>
        <!-- hide this plugin from Eclipse running it. It causes JMS servers to get spawned -->
        <profile>
	      <id>jms-server</id>
	      <activation>
	        <property>
	          <name>!m2e.version</name>
	        </property>
	      </activation>
	      <build>
                <plugins>
                    <!-- start/stop the JMS server during IT tests -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-antrun-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>start-jms-server</id>
                                <phase>pre-integration-test</phase>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                                <configuration>
                                    <target>
                                        <java classname="ejava.examples.jmsmechanics.ArtemisServer" fork="true" spawn="${jms.spawn}">
                                             <classpath>
                                                 <path refid="maven.test.classpath" />
                                                 <path refid="maven.runtime.classpath" />
                                             </classpath>
                                             <!--
                                                 <path location="${project.build.directory}/test-classes/hornetq" />
                                             <jvmarg value="-Xrunjdwp:transport=dt_socket,server=y,suspend=y,address=8000 -Xnoagent" />
                                             <sysproperty key="java.compiler" value="NONE" />
                                             -->
                                             <sysproperty key="baseDir" value="${project.build.directory}/test-classes" />
                                        </java>
                                        <echo>started JMS Server</echo>
                                    </target>
                                </configuration>
                            </execution>
                            <execution>
                                <id>stop-jms-server</id>
                                <phase>post-integration-test</phase>
                                <goals>
                                    <goal>run</goal>
                                </goals>
                                <configuration>
                                    <target>
                                        <echo>stopping JMS Server</echo>
                                        <echo file="${project.build.directory}/test-classes/STOP_ME" />
                                    </target>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>

        <profile>
          <id>jms.remote</id>
          <activation>
            <property>
	      <name>m2e.version</name>
            </property>
          </activation>
          <properties>
              <jms.embedded>false</jms.embedded>
              <java.naming.factory.initial>${jboss.remoting.java.naming.factory.initial}</java.naming.factory.initial>
              <java.naming.provider.url>${jboss.remoting.java.naming.provider.url}</java.naming.provider.url>
              <java.naming.factory.url.pkgs>${jboss.remoting.java.naming.factory.url.pkgs}</java.naming.factory.url.pkgs>
          </properties>
          <dependencies>
            <!-- brings in JBoss RMI dependencies -->
            <dependency>
                <groupId>info.ejava.examples.common</groupId>
                <artifactId>jboss-rmi-client</artifactId>
                <version>${project.version}</version>
                <type>pom</type>
                <scope>test</scope>
            </dependency>    
          </dependencies>
        </profile>
    </profiles>
</project>
