<?xml version="1.0"?>
<document>
  <properties>
    <title>Building the Service Tier with JavaEE/EJB, Fall 2014</title>
    <author email="ejavaguy@gmail.com">ejavaguy@gmail.com</author>
  </properties>
  <body>
    <section name="Building the Service Tier with JavaEE/EJB, Fall 2014">
      <p>
      This is the course home page for the Building the Service Tier
      with JavaEE/EJB and JBoss/Wildfly, taught at SRA-U.
      This site will be populated as the semester progresses and topics are addressed. 
      The class 
      <a href="https://corpteams.sranet.sra.com/support/sra-u/wildfly/default.aspx">collaboration site</a>
      is located on the portal.
      </p>
      <p>
      Legal Disclaimer: The information and opinions expressed within the
      materials located on this site are the personal contributions of
      Jim Stafford. Content published here is not reviewed or approved by
      my employers (The Johns Hopkins University and SRA International)
      before it is posted and does not necessarily represent the views
      and opinions of my employers.
      </p>
      <subsection name="What's New" id="whatsnew">
      <ul>
      <!--
          <li>2014-12-03: Posted Async TODOs</li>
          <li>2014-11-19: Posted JMS TODOs</li>
          <li>2014-11-12: Posted Security TODOs</li>
          <li>2014-11-05: Posted Web Tier TODOs</li>
          <li>2014-10-30: Posted Transaction TODOs</li>
          <li>2014-10-28: Posted Server-Side JPA Notes and Transaction TODOs</li>
          <li>2014-10-23: Posted typo corrections to Basic EJB Dev Exercise</li>
          <li>2014-10-19: Posted JNDI/ENC Exercise and EJB TODOs</li>
          <li>2014-10-14: Posted Final Project 1 TODOs and Server-side EJB Modules</li>
          <li>2014-10-07: Posted JPA-QL TODOs</li>
          <li>2014-09-30: Posted Updated ORM Relationship TODOs</li>
          <li>2014-09-23: Posted Core JPA TODOs and updated setup for JPA exercises</li>
          <li>2014-09-16: Posted EntityManager TODOs</li>
          <li>2014-09-09: Addressed many JPA Eclipse warnings in examples</li>
          <li>2014-09-09: Posted Project 1 description and Business Logic TODOs</li>
          -->
          <li>2014-12-10: Updated Transaction Notes</li>
          <li>2014-12-02: Added EJB/JPA Exercise</li>
          <li>2014-11-19: Updated EJB Intro TODOs</li>
          <li>2014-11-11: Posted updates and EJB Intro TODOs</li>
          <li>2014-11-03: Posted initial class site</li>
      </ul>
      </subsection>
      <subsection name="Class To Do" id="todo">
      <ul>

      <!-- week 13: Async 
      <li><ul>
          <li>Setup and deploy your JMS publisher code to eLeague. All
          resources should be injected by the container.</li>
          <li>Setup and implement a JMS MDB in the eClub to receive 
          updates published by eLeague.</li>
          <li>Setup and deploy your JMS publisher code to eClubEJB.
          Again - all resources should be injected by the container.</li>
          <li>Verify that the eLeague JMS JSE Subscriber from last
          week receives published messages from eLeagueEJB.</li>
          <li>Implement an EJBTimer to perform scheduled work within
          eLeagueEJB and eClubEJB.</li>
          <li>Test, cleanup, document, and turn in project 3</li> 
      </ul></li>
           -->

      <!-- week 12: JMS
      <li><ul> 
          <li>Security
              <ul>
                  <li>Update your server configuration to the latest from the baseline 
                  to correct leniency issues with user credentials. Update your 
                  server database settings after updating if desired since they will be
                  replaced.</li>
                  <li>Update your user password(s) to new value</li>
                  <li>Verify project 2 can build/deploy with new settings and report issues</li>
                  <li>Finish security configuration, implementation, and testing</li>
              </ul>
          </li>

          <li>JMS Message Design
              <ul>
                  <li>Design your JMS message type(s)</li>

                  <li>Write a utility class that publishes the messages.
                  This class ideally would be placed in with the BLImpl
                  classes.  However, if it publishes DTO classes, the
                  DTOs may have to get moved in with the BO module to
                  satisfy dependency constraints.</li>

                  <li>Write an integration-test for the publishing and 
                  subscribing of the message types designed above. The
                  integration-test should use the topic(s) pre-configured
                  in the class server.</li>
              </ul>
          </li>

          <li>JSE JMS Client
              <ul>
                  <li>Implement a Java SE Client to receive and log the JMS
                  messages. This client can be placed in BLImpl, must use a
                  selector, and be launchable by the grader using an Ant script.
                  The Ant script can be part of either the BLImpl or RMI Test
                  project. See class examples on how write the Ant script.</li>
              </ul>
          </li>
      </ul></li> 
      -->

      <!-- week 11: Security
      <li><ul>
            <li>Project
                <ul>
                  <li>Complete your project 2, finish testing, and turn in.</li>
                  <li>Start project 3</li>
                </ul>
            </li>
            <li>Exercises
                <ul>
                  <li>Complete through Part I</li>
                </ul>
            </li>
          <li>EJB
              <ul>
                  <li>Assign EJB to security-domain "other".
                  The RMI Tests should fail access at this point.</li>
                  <li>Specify required roles to access each EJB method</li>
              </ul>
          </li>
          <li>Integration Tests
              <ul>
                  <li>Add the necessary logins to your existing integration tests
                  to allow them to pass again.</li>
                  <li>Author at least one new test to demonstrate you have security
                  enabled</li>
              </ul>
          </li>
          <li>WAR
              <ul>
                  <li>Assign WAR to security-domain "other"</li>
                  <li>Add security-constraint elements to the WAR web.xml. The 
                  user should be prompted for a login at this point and be able to
                  access web pages and EJB methods that they are authorized for
                  and be refused access to what they are un-authorized to access</li>
                  <li>Eliminate access to any information or option the user does
                  not have access to see or use</li>
              </ul>
          </li>
          <li>Overall
              <ul>
                  <li>Eliminate the passing of userId information when the appropriate
                  means is to obtain through the EJB or WARs security context.</li>
              </ul>
          </li>
      </ul></li>
      -->

      <!-- week 10: Web
      <li><ul>
            <li>Exercises
                <ul>
                  <li>Complete exercises through Part G</li>
                </ul>
            </li>
            <li>Examples
                <ul>
                  <li>Look over Web UI parts of the ejbsessionBank.</li>
                  <li>The webejb example shows an example of RMI and JAX-RS
                      being used as a remote facade. You may use either technique 
                      for eClub. eLeague should use RMI.</li>
                </ul>
            </li>
            <li>Web/Project
                <ul>
                  <li>Add a WAR project to eLeague. Add in supporting 
                      Servlet and JSP implementations.</li>
                  <li>Add a WAR project to eClub and deploy your eClub
                      EJBs within that WAR - either embedded or included from a 
                      separate module. See the webejb example</li>
                  <li>Add supporting Servlet and JSP implementations for eClub.  
                      This WAR may obtain functionality implemented by eLeagueEJB. 
                      However, it should not directly communicate with eLeagueEJB. 
                      eClubEJB should act as a facade for all behavior performed 
                      on behalf of eClubWAR</li>
                </ul>
            </li>
      </ul></li>
      -->

      <!-- week 09: (CDI and) Transactions 
      <li><ul>
            <li>Examples
                <ul>
                  <li>ejb-jpa-example provides beyond-basic examples of using 
                    JPA on the server-side - to include LAZy-load exceptions/solutions,
                    DTOs, caching state with Stateful EJBs, etc.
                  </li>
                </ul>
            </li>
            <li>Project
                <ul>
                  <li>Design your remote interfaces and DTO classes for eDmv</li>
                  <li>Begin adding the other session beans, remote interfaces,
                  business logic integration, and RMI tests for project 2.</li>
                  <li>Finish implementing EJB use cases for eSales end-to-end testing.</li>
                  <li>Transactions
                        <ul>
                          <li>Add @Transaction declarations</li>
                          <li>Implement the transaction test requirement.
                          Remember, your entities must actually hit the DB and be rolled
                          back as part of the transaction. Simply rejecting bad data does
                          not satisfy the project transaction rollback demo requirement.</li>
                        </ul>
                  </li>
                </ul>
            </li>
      </ul></li>
           -->

      <!-- week 05: EJB/JPA and Remote Interfaces -->
      <li><ul>
            <li>Exercises
                <ul>
                  <li>Look over ejb-tx-example and focus on aspects unique to tranactions</li>
                </ul>
            </li>
      </ul></li>

      </ul>
      </subsection>

      <subsection name="Things you should have finished!" id="completed">
      <ul>
      <!-- week 04: EJB/JPA and Remote Interfaces -->
      <li><ul>
            <li>Exercises
                <ul>
                  <li>Complete EJB/JPA and Remote Interface exercise.</li>
                </ul>
            </li>
      </ul></li>

      <!-- week 03: Session EJBs and JNDI/ENC Configuration-->
      <li><ul>
            <li>Exercises
                <ul>
                  <li>Complete JNDI/ENC EJB Configuration exercise.</li>
                </ul>
            </li>
      </ul></li>

      <!-- week 02: Development Use Cases -->
      <li><ul>
            <li>Exercises
                <ul>
                  <li>Finish-up the Basic EJB Development exercise.</li>
                </ul>
            </li>
      </ul></li>

      <!-- week 01: Intro EJB -->
      <li><ul>
            <li>Exercises
                <ul>
                  <li>Finish up with the software installation and report the
                  success or failure(s) of a build that includes the 
                  ejb-modules profile (-Pejb-modules).</li>
                  <li>Start working through the Basic EJB Development exercise.
                  Post questions or observations about what you encountered during
                  this exercise.  This will span about two weeks.</li>
                </ul>
            </li>
            <li>Examples
                <ul>
                  <li>Begin looking at ejb-basic and ejbsessionBank example applications; 
                  which form an EJB, EAR, RMI Test, as well as a WAR Client.
                  </li>
                </ul>
            </li>
      </ul></li>

      <!-- week 00: Course Intro -->
      <li><ul> 
          <li>Post at least 1 test message to discussion area</li>
          <li>Setup development environment by going through setup exercise
            <ul>
              <li>use the git "ejb-class" branch (git checkout ejb-class). Do not use the default "master" branch.</li>
              <li>use "coursedocs-ejb" - not "coursedocs" - when referenced in instructions</li>
              <li>do not use "webdev" repository locations. For Nexus repositories use
                    <ul>
                        <li>srau-releases: http://srau.ejava.info/nexus/content/repositories/srau-releases/</li>
                        <li>srau-snapshots: http://srau.ejava.info/nexus/content/repositories/srau-snapshots/</li>
                    </ul>
              </li>
              <li>Many of the class modules have been commented out in the root pom to allow for simpler first 
                  build. Once you have everything setup, please attempt to build the EJB
                  modules (using -Pejb-modules or building from the ejb directory) and all modules (using -Pall-modules
                  or building from the jpa and async directories). You are done with the assignment once you have
                  all modules successfully building in your area. Make use of the newsgroup to efficiently solve any 
                  errors.</li>
            </ul>
          </li>
          <li>If new to Maven, go through the simple application exercise</li>
          <li>(optional) Get an early start on the Basic EJB Development exercise</li>
      </ul></li>


      </ul>
      </subsection>
    </section>
  </body>
</document>
