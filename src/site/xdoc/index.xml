<?xml version="1.0"?>
<document>
  <properties>
    <title>Enterprise Java (605.784.31) Fall 2018</title>
    <author email="jim.stafford@jhu.edu">jim.stafford@jhu.edu</author>
  </properties>
  <body>
    <section name="Enterprise Java (605.784.31) Fall 2018">
      <p>
      This is the course home page for the Enterprise Java Course
      (605.784), taught at John's Hopkins University, Engineering
      Programs for Professionals.  
      This site will be populated as the
      semester progresses and topics are addressed. If you are looking
      for a version of the full content for ejava-javaee, refer to
      <a href="http://webdev.jhuep.com/~jcs/legacy-ejava-javaee">
      http://webdev.jhuep.com/~jcs/legacy-ejava-javaee</a>.
      </p>
      <p>
      Legal Disclaimer: The information and opinions expressed within the
      materials located on this site are the personal contributions of
      Jim Stafford. Content published here is not reviewed or approved by
      my employers (The Johns Hopkins University and SRA International)
      before it is posted and does not necessarily represent the views
      and opinions of my employers.
      </p>
      <subsection name="What's New" id="whatsnew">
      <ul>
      <!--
          <li>2018-12-05: Posted Async TODOs</li>
          <li>2018-11-28: Posted JMS TODOs</li>
          <li>2018-11-14: Posted Security TODOs</li>
          -->
          <li>2018-11-07: Posted Web Tier JAX-RS TODOs</li>
          <li>2018-10-31: Posted Transaction TODOs</li>
          <li>2018-10-24: Posted EJB TODOs</li>
          <li>2018-10-17: Posted Project2 and 3 Specs and Server-side EJB Modules</li>
          <li>2018-10-10: Posted Final Project 1 TODOs</li>
          <li>2018-10-02: Posted JPA-QL TODOs</li>
          <li>2018-09-26: Posted Updated ORM Relationship TODOs</li>
          <li>2018-09-19: Posted Core JPA TODOs</li>
          <li>2018-09-12: Posted EntityManager TODOs</li>
          <li>2018-09-07: Updated non-portable line separator in schemagen tests</li>
          <li>2018-09-05: Activated project and jpa modules in root-level build</li>
          <li>2018-09-05: Posted Project 1 description and Business Logic TODOs</li>
          <li>2018-08-31: Fixed placement of week 1 TODOs</li>
          <li>2018-08-21: Posted initial class site</li>
      </ul>
      </subsection>
      <subsection name="Class To Do" id="todo">
      <ul>

      <!-- week 13: Async 
      <li><ul>
          <li>Setup and deploy your JMS publisher code to eSales. All
          resources should be injected by the container.</li>
          <li>Setup and implement a JMS MDB in the eBidbot to receive 
          updates published by eSales.</li>
          <li>Setup and deploy your JMS publisher code to eBidbot.
          Again - all resources should be injected by the container.</li>
          <li>Verify that the JMS JSE Subscriber from last
          week receives published messages from EJB tier</li>
          <li>Implement an EJBTimer to perform scheduled work</li>
          <li>Test, cleanup, document, and turn in project 3</li> 
      </ul></li>
      -->

      <!-- week 12: JMS 
      <li><ul> 
          <li>Security
              <ul>
                  <li>Finish security configuration, implementation, and testing</li>
              </ul>
          </li>

          <li>JMS Message Design
              <ul>
                  <li>Design your JMS message type(s)</li>

                  <li>Write a utility class that publishes the messages.
                  This class ideally would be placed in with the BLImpl
                  classes.  However, if it publishes DTO classes, the
                  DTOs may have to get moved in with the BO module to
                  satisfy dependency constraints.</li>

                  <li>Write an integration-test for the publishing and 
                  subscribing of the message types designed above. The
                  integration-test should use the topic(s) pre-configured
                  in the class server.</li>
              </ul>
          </li>

          <li>JavaSE JMS Client
              <ul>
                  <li>Implement a Java SE Client to receive and log the JMS
                  messages. This client can be placed in BLImpl, must use a
                  selector, and be launchable by the grader using an Ant script.
                  The Ant script can be part of either the BLImpl or RMI Test
                  project. See class examples on how write the Ant script.</li>
              </ul>
          </li>
      </ul></li> 
      -->

      <!-- week 11: Security 
      <li><ul>
            <li>Project
                <ul>
                  <li>Complete your project 2, finish testing, and turn in.</li>
                  <li>Start project 3</li>
                </ul>
            </li>
          <li>Examples
              <ul>
                  <li>Look at updated securePing application for examples
                  on how to perform different logins using EJB Client
                  and JBoss Remoting.</li>
              </ul>
          </li>
          <li>EJB
              <ul>
                  <li>Assign EJB to security-domain "other".
                  The RMI Tests should fail access at this point.</li>
                  <li>Specify required roles to access each EJB method</li>
              </ul>
          </li>
          <li>Integration Tests
              <ul>
                  <li>Add the necessary logins to your existing integration tests
                  to allow them to pass again.</li>
                  <li>Author at least one new test to demonstrate you have security
                  enabled</li>
              </ul>
          </li>
          <li>WAR
              <ul>
                  <li>Assign WAR to security-domain "other"</li>
                  <li>Add security-constraint elements to the WAR web.xml. The 
                  user should be prompted for a login at this point and be able to
                  access web pages and EJB methods that they are authorized for
                  and be refused access to what they are un-authorized to access</li>
                  <li>Eliminate access to any information or option the user does
                  not have access to see or use</li>
              </ul>
          </li>
          <li>Overall
              <ul>
                  <li>Eliminate the passing of userId information when the appropriate
                  means is to obtain through the EJB or WARs security context.</li>
              </ul>
          </li>
      </ul></li>
      -->

      <!-- week 10: Web 
      -->
      <li><ul>
            <li>Examples
                <ul>
                  <li>Look over JAX-RS example(s); ejb-jaxrs-todos and ejb-web-inventory under ejb-web.
                  The ejb-jaxrs-todos example was created with the intent to be closely aligned 
                  with project architectural layers (JAX-RS Client/Server, XML and JSON DTOs, JPA BOs, EJB
                  @Remote interfaces, exceptions, status reporting, etc.). 
                  ejb-web-inventory mixes in some RMI with HTTP-based services.
                  </li>
                </ul>
            </li>
            <li>Project
                <ul>
                  <li>Add a WAR project to eLeague. Add in supporting JAX-RS Resource class(es)
                      to expose EJB functionality through a REST-like API. You may want to create 
                      separate Java classes to represent each Resource since this 
                      application is considered "complex, modular, and layered".
                      </li>
                  <li>Add supporting JAX-RS Resources to eClub WAR to expose EJB functionality
                      through another REST-like API. You may want to create a single class to 
                      represent each of the Resources since this application is considered 
                      "simple, small, and quickly developed".
                      </li>
                  <li>Implement JAX-RS Client calls for each of the implemented end-to-end steps.</li>
                  <li>Integrate the HTTP calls with the existing RMI calls of the end-to-end IT scenario</li>
                </ul>
            </li>
      </ul></li>

      </ul>
      </subsection>

      <subsection name="Things you should have finished!" id="completed">
      <ul>

      <!-- week 09: Transactions 
      -->
      <li><ul>
            <li>Exercises
                <ul>
                  <li>Complete the JPA/EJB Remote Interfaces Exercise.
                  It is highly recommended that you go through this since it
                  takes you through many of the use cases and common issues
                  related to project 2.</li>
                </ul>
            </li>
            <li>Project
                <ul>
                  <li>Design your remote interfaces and DTO classes for eLeague</li>
                  <li>Begin adding the other session beans, remote interfaces,
                  business logic integration, and RMI tests for project 2.</li>
                  <li>Work thru the EJB use cases for eLeague end-to-end testing
                  using RMI. You will be able to reuse all of these artifacts for 
                  JAX-RS covered next week.</li>
                  <li>Transactions
                        <ul>
                          <li>Add @Transaction declarations</li>
                          <li>Implement the transaction test requirement.
                          Remember, your entities must actually hit the DB and be rolled
                          back as part of the transaction. Simply rejecting bad data does
                          not satisfy the project transaction rollback demo requirement.</li>
                        </ul>
                  </li>
                </ul>
            </li>
      </ul></li>


      <!-- week 09: Session Beans 
      -->
      <li><ul>
            <li>Exercises
                <ul>
                  <li>Continue working through the Java EE exercises (Basic EJB Development).
                  It is highly recommended that you go through this since it
                  takes you through many of the use cases and common issues
                  related to project 2.</li>
                </ul>
            </li>
            <li>Examples
                <ul>
                  <li>Continue looking at ejb-basic and ejbsessionBank example applications; 
                  which form an EJB, EAR, RMI Test, as well as a WAR Client.
                  These will be key component types within project 2.</li>
                </ul>
            </li>
            <li>Project
                <ul>
                  <li>Look over the specification for project 2.</li>
                  <li>Apply the maven, EJB, EAR, RMI Test, and remote interface
                  concepts from the exercises to your project 2.</li>
                  <li>Have an EAR and WAR deployments to the server complete
                  with a hollow EJB (no persistence unit or dependencies) 
                  and a remote interface in each.</li>
                  <li>Have a working JNDI lookup and call from your IT test
                  to the deployed hollow EJB.</li>
                </ul>
            </li>
      </ul></li>

      <!-- week 08: SQL Tuning and Session Beans 
      -->
      <li><ul> 
            <li>Project 1
                <ul>
                  <li>Finish up project 1 and submit according
                  to the submission guidelines.</li>
                </ul>
            </li>
            <li>Examples
                <ul>
                  <li>The class examples have been updated to include the 
                  server-side modules. Be be sure to have your JBoss server 
                  running when building prior to building them from this 
                  point forward.</li>
                  <li>Begin looking at ejb-basic-example and ejbsessionBank example applications; 
                  which form an EJB, EAR, RMI Test, as well as a WAR Client.
                  These will be key component types within project 2.</li>
                </ul>
            </li>
            <li>Exercises
                <ul>
                  <li>Work through the Basic EJB Development exercise.
                  It is highly recommended that you go through this since it
                  takes you through many of the use cases and common issues
                  related to project 2.</li>
                </ul>
            </li>
            <li>Project 2
                <ul>
                  <li>Perform any desired post-submission refactoring of your 
                  project 1 implementation prior to re-use within project 2.</li>
                  <li>Look over the specification for project 2.</li>
                  <li>Apply the maven, EJB, EAR, RMI Test, and remote interface
                  concepts from the exercises to your project 2.</li>
                  <li>Attempt to have one IT test deploying eLeagueEAR with an EJB and 
                  no persistence unit. Try to invoke at least one skeletal method using RMI.
                  </li>
                </ul>
            </li>
      </ul></li>


      <!-- week 07: Project 1 Work -->
      <li><ul> 
            <li>DAOs
                <ul>
                  <li>Add sample indexes to your DB schema. Possibly account for WHERE 
                      clauses used in queries and foreign keys used in relationship joins.</li>
                </ul>
            </li>
            <li>Project
                <ul>
                  <li>Try to complete project 1 and submit a preview according
                  to the project submission guidelines by the stated deadline (no late passes).</li>
                </ul>
            </li>
      </ul></li>

      <!-- week 06: JPAQL -->
      <li><ul> 
            <li>Exercises
                <ul>
                  <li>Go through the Query Exercise if you have time.</li>          
                </ul>
            </li>
            <li>DAOs
                <ul>
                  <li>Finish mapping remaining relationships</li>
                  <li>Refactor or implement any necessary functionality using Queries and JPA-QL.</li>
                </ul>
            </li>
            <li>Project
                <ul>
                  <li>Finish adding required business logic to satisfy the
                  specified end-to-end scenario.</li>
                  <li>Add unit tests to verify the functionality of the individual 
                  business logic methods.</li>
                </ul>
            </li>
      </ul></li>

      <!-- week 05: JPA Relationships -->
      <li><ul> 
            <li>Exercises
                <ul>
                  <li>Go through the Relationship Mapping Exercise. This exercise covers 
                      issues that come up when mapping Java class relationships to an RDBMs 
                      using JPA. There is more there than one could possibly ever finish
                      in the time alloted. Pick and choose which sections are relevant 
                      to your project and use it as a reference to refer back to later.</li>          
                </ul>
            </li>
            <li>JPA Entities
                <ul>
                  <li>Enhance your business objects to include JPA relationships.
                  Be sure to include proper deletion as a part of your cleanup
                  in your test case. This now must take foreign key constraints
                  into consideration (e.g., can't delete parent object when you
                  still have related child)</li>
                </ul>
            </li>
            <li>DAOs
                <ul>
                  <li>Enhance your DAOs and DAO unit tests to account for storing
                  parent/child relationships. It is recommended that you *not*
                  use Cascades when starting out. Keep the functionality implemented
                  within the scope of the requirements of the end-to-end scenario.
                  Not every entity and relationship needs full CRUD behavior.
                  </li>
                </ul>
            </li>
            <li>Business Logic
                <ul>
                  <li>Fully implement your ingest capability. Provide some sort of 
                  verification that the ingest worked. You don't have to test
                  for the entire model ingested, but provide a brief set of 
                  sanity checks that compares pre/post and selected information.
                  </li>
                  <li>Implement your populate/ingest portion of the end-to-end scenario 
                  using your ingest capability.  Encapsulate it and your reset within 
                  a TestUtilImpl class.  Re-use this class as a part of your unit testing. 
                  </li>
                </ul>
            </li>
      </ul></li>


      <!-- week 04: JPA Core -->
      <li><ul> 
            <li>Exercises
                <ul>
                  <li>Go through the Entity Mapping Exercise. This exercise covers issues that
                      come up when mapping Java classes to an RDBMs using JPA.</li>          
                </ul>
            </li>
            <li>JPA Entities
                <ul>
                  <li>Create the remainder of your business objects for the project.</li>
                  <li>Declare the business objects as @Entities and map the classes
                      to tables and columns in your database. Last week you accepted 
                      mostly defaults. This week you will perform fine tuned table and
                      column mapping.  Your schema file(s) and JPA DAOs should be using 
                      the same database tables at this point. The easiest way to do that
                      is to have the JPA provider generate a starting schema from your
                      mappings.  Mark relationships and problem fields as @Transient at 
                      this point in time.</li>
                  <li>Add additional bean validation rules to your business objects
                      to address any non-null, minimum, maximum, and pattern constraints
                      you may have.</li>
                  <li>Create unit tests for any non-trivial business rules implemented
                      within the business object classes.</li>
                </ul>
            </li>
            <li>JPA DAOs
                <ul>
                  <li>Create unit tests for the ability to create your business objects
                      and get them by primary key. With relationships marked @Transient,
                      there should be no relationships expressed between your tables.
                      Pay attention to the business rules your application has for ordering
                      the creation (e.g., must have Season before creating a Contest).
                      Solve dependency issues with sensible pre-conditions for child objects
                      (i.e. assume/insist that parent be in place before child exists).</li>
                  <li>Enact your bean validation rules for @PrePersist and @PreUpdate</li>
                </ul>
            </li>
            <li>Business Logic
                <ul>
                  <li>Create unit test for injest and begin implementation of injest
                  for at least one of the types in your model and provided test data.
                  Try to avoid using classes with required relationships at this point.
                  This goal has been achieved when you have instantiated the provided 
                  parser within a unit test, read in the provided XML data file, streamed
                  through the data file looking for objects of early interest from the parser, 
                  and persisted the objects using one of your DAOs. This will be a thin
                  slice of the overall dataset.
                  </li>
                  <li>Manually validate a DTO or business object using the programmatic 
                      validation API in your JUnit test or helper class that is part of 
                      the application. Try not to make a specific call from within the 
                      business logic. This will help you later when we begin leveraging
                      the server-side container.</li>
                </ul>
            </li>
      </ul></li>


      <!-- week 03: DAOs and EntityManager -->
      <li><ul> 
            <li>Project Sanity Check
            <ul>
              <li>Correct and complete your project structure based on comments from your early submission
                   last week. Turn in update module tree (ideally by Sunday evening) unless early 
                   submission was previously accepted.</li>          
              <li>Only business logic interfaces, skeletal business objects, and skeletal end-to-end tests
                  are required for the project sanity check. Data tier/JPA topics listed below are not a 
                  required part.</li>          
              <li>Complete this before beginning to add details listed below to your project.</li>          
            </ul>
            </li>

            <li>Exercises and Examples
            <ul>
              <li>Go through the EntityManager Exercise. This exercise is just as much about covering
                  the details to create a maven module for data tier classes as it is about the JPA 
                  EntityManager.</li>          
              <li>Look over the class project example implementation under the 
                projects/eSport/eLeague directory as it relates to integrating
                JPA within the individual modules.
              </li>
            </ul>
            </li>

            <li>Maven and DAO Unit Test Framework
                <ul>
		  <li>Add JPA/Hibernate infrastructure to project module(s) hosting
		    DAO classes and higher.  This should at least consist of a successful 
                    connection to the DB.  You are done with this goal when you have a JPA
		    JUnit test for the DAO and the setUp() method is able to create an 
                    EntityManager.
                  </li>
                </ul>
            </li>          

            <li>Database Schema
                <ul>
                  <li>Create a file to host your draft DB schema for your business object(s). This should go in 
                    the module hosting your DAOs. This is expected to be very basic at this point.</li>
                  <li>Implement a way to create your schema in the DB as a part of your DAO testing. Factor
                      in reuse across multiple modules, multiple test cases, and multiple test methods.
                      You may want to review the following classes, directly re-use the DBUtil class from
                      the ejava-util course module, and implement your version of the TestUtilImpl class
                      to the specifics of your project.
                    <ul>
<li><a href="https://github.com/ejavaguy/ejava-student/blob/master/common/ejava-util/src/main/java/ejava/util/jpa/DBUtil.java">DBUtil.java</a></li>
<li><a href="https://github.com/ejavaguy/ejava-student/blob/master/projects/eSport/eLeague/eLeagueBLImpl/src/main/java/ejava/projects/eleague/blimpl/LeagueTestUtilImpl.java.java">TestUtilImpl.java</a></li>
                    </ul>
                  </li>
                </ul>
            </li>
          
            <li>JPA Entities and DAOs
            <ul>
              <li>Enhance your business object (BO) class(es) with @Entity
                declarations, a public default constructor, and a primary
                key designation (@Id) to make them legal JPA Entity classes. Leave
                other things default for now. Annotate any and all collections 
                and references to other Entity classes with @Transient annotation. 
                We are not ready to cover relationships just yet.
              </li>
              <li>Design DAO interfaces to support the data access requirements
                  of your business logic participating in the end-to-end 
                  scenario. These interfaces should be void of persistence
                  technology detail - but feel free to commit to JPA for the 
                  semantics of how the calls should work.
              </li>
              <li>Implement an initial JPA implementation for your DAO
                   interfaces for create and find methods. Keep in mind the 
                   scope of the end-to-end scenario when building these 
                   methods to help limit and focus the work performed.
              </li>
            </ul>
            </li>

            <li>DAO Testing
            <ul>
              <li>Design and implement a set of unit tests for a few of your JPA
                DAO(s) to save and find a few of your business objects. Note how 
                the default schema for the @Entities may not match up with your 
                desired DB schema at this point when you run the tests.
              </li>
            </ul>
            </li>
      </ul></li>

      <!-- week 02: DevEnv and Business Logic -->
      <li><ul> 
            <li>Overall Project
                <ul>
                  <li>Look over the class project 1 and post any questions.</li>
                  <li>Establish your project directory structure and perform a build from the root.
                      Start one module at a time. Avoid doing a blind bulk copy and replace of the 
                      course "thin thread" example. Understand the purpose of the directories, 
                      modules, and contents before you copy them in total.</li>
                  <li>Establish a short name mangler (e.g., jcsSport, JCS_CLUB) that will be 
                      unique to your project.</li>
                </ul>
            </li>
            <li>Business Logic
                <ul>
                  <li>Create a JUnit unit test for the business logic to address the requirements 
                      for the end-to-end scenario.  Place this unit test in with the module
                      containing your business logic and use it to help scope your future work 
                      on the project. Start with a @Test full of comments expressing the end-to-end
                      scenario and progress to code.</li>
                  <li>Create the business logic interfaces and define the operations that will
                      satisfy the actions of the end-to-end scenario. Host the interfaces in the same 
                      module as the Business Objects.</li>
                  <li>Create a set of business logic classes to implement the busines logic
                      interfaces. Stub out each call for now so the end-to-end test will
                      execute.</li>
                </ul>
            </li>
            <li>Business Objects
                <ul>
                  <li>Create skeletal business object classes necessary to express the vocabulary 
                      of the business logic interfaces. Add attribute properties as you encounter
                      them. Do not worry about JPA aspects just yet.</li>
                  <li>Design and implement the basics of a JUnit unit test for a business object (just one). 
                      Place this unit test within the module containing your business objects.</li>
                </ul>
            </li>
            <li>Early Project Submissions
                <ul>
                  <b><li>Send me an early submission of your project sometime this week 
                      (ideally by Mon evening) in a stable, known but not necessarily complete state. 
                      You should have a project structure in place that can build from the root, a good 
                      start on the items mentioned above, and a list of issues or questions
                      that you would like answered about how to move forward.
                      This will be used as feedback to the class.</li></b>
                </ul>
            </li>
      </ul></li>

      <!-- week 01: Course Intro -->
      <li><ul> 
          <li>register for newsgroup and setup e-mail handling (all e-mails will have ejava_class in subject)</li>
          <li>post at least 1 test message to newsgroup</li>
          <li>setup development environment by going through exercises 0 and 1</li>
          <li>post your weekly newsgroup contribution based on development environment setup</li>
      </ul></li>


      <li><ul>
          <li>had a nice break!</li>
      </ul></li>

      </ul>
      </subsection>
    </section>
  </body>
</document>
